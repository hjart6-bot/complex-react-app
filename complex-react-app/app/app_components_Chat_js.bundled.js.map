{"version":3,"sources":["webpack://complex-react-app/./app/components/Chat.js"],"names":["Chat","socket","useRef","appState","useContext","StateContext","appDispatch","DispatchContext","chatField","chatLog","state","setState","useImmer","fieldValue","chatMessages","useEffect","isChatOpen","current","focus","type","io","on","message","draft","push","disconnect","scrollTop","scrollHeight","length","handleFieldChange","e","value","target","handleSubmit","preventDefault","emit","token","user","username","avatar","map","index"],"mappings":"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","file":"app_components_Chat_js.bundled.js","sourcesContent":["import React, { useEffect, useContext, useRef } from \"react\"\r\nimport StateContext from \"../StateContext\"\r\nimport DispatchContext from \"../DispatchContext\"\r\nimport { useImmer } from \"use-immer\"\r\nimport { Link } from \"react-router-dom\"\r\nimport io from \"socket.io-client\"\r\n\r\nfunction Chat() {\r\n  const socket = useRef(null)\r\n  const appState = useContext(StateContext)\r\n  const appDispatch = useContext(DispatchContext)\r\n  const chatField = useRef(null)\r\n  const chatLog = useRef(null)\r\n  const [state, setState] = useImmer({\r\n    fieldValue: \"\",\r\n    chatMessages: [],\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (appState.isChatOpen) {\r\n      chatField.current.focus()\r\n      appDispatch({ type: \"clearUnreadChatCount\" })\r\n    }\r\n  }, [appState.isChatOpen])\r\n\r\n  useEffect(() => {\r\n    socket.current = io(\"http://localhost:8080\")\r\n    socket.current.on(\"chatFromServer\", (message) => {\r\n      setState((draft) => {\r\n        draft.chatMessages.push(message)\r\n      })\r\n    })\r\n\r\n    return () => socket.current.disconnect()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    chatLog.current.scrollTop = chatLog.current.scrollHeight\r\n    if (state.chatMessages.length && !appState.isChatOpen) {\r\n      appDispatch({ type: \"incrementUnreadChatCount\" })\r\n    }\r\n  }, [state.chatMessages])\r\n\r\n  //event target value (e)\r\n  function handleFieldChange(e) {\r\n    const value = e.target.value\r\n    setState((draft) => {\r\n      draft.fieldValue = value\r\n    })\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    // Send message to chat server\r\n    socket.current.emit(\"chatFromBrowser\", { message: state.fieldValue, token: appState.user.token })\r\n\r\n    setState((draft) => {\r\n      // Add message to state collection of messages\r\n      draft.chatMessages.push({ message: draft.fieldValue, username: appState.user.username, avatar: appState.user.avatar })\r\n      draft.fieldValue = \"\"\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div id=\"chat-wrapper\" className={\"chat-wrapper shadow border-top border-left border-right \" + (appState.isChatOpen ? \"chat-wrapper--is-visible\" : \"\")}>\r\n      <div className=\"chat-title-bar bg-primary\">\r\n        Chat\r\n        <span onClick={() => appDispatch({ type: \"closeChat\" })} className=\"chat-title-bar-close\">\r\n          <i className=\"fas fa-times-circle\"></i>\r\n        </span>\r\n      </div>\r\n      <div id=\"chat\" className=\"chat-log\" ref={chatLog}>\r\n        {state.chatMessages.map((message, index) => {\r\n          if (message.username == appState.user.username) {\r\n            return (\r\n              <div key={index} className=\"chat-self\">\r\n                <div className=\"chat-message\">\r\n                  <div className=\"chat-message-inner\">{message.message}</div>\r\n                </div>\r\n                <img className=\"chat-avatar avatar-tiny\" src={message.avatar} />\r\n              </div>\r\n            )\r\n          }\r\n          return (\r\n            <div key={index} className=\"chat-other\">\r\n              <Link to={`/profile/${message.username}`}>\r\n                <img className=\"avatar-tiny\" src={message.avatar} />\r\n              </Link>\r\n              <div className=\"chat-message\">\r\n                <div className=\"chat-message-inner\">\r\n                  <Link to={`/profile/${message.username}`}>\r\n                    <strong>{message.username}: </strong>\r\n                  </Link>\r\n                  {message.message}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      <form onSubmit={handleSubmit} id=\"chatForm\" className=\"chat-form border-top\">\r\n        <input value={state.fieldValue} onChange={handleFieldChange} ref={chatField} type=\"text\" className=\"chat-field\" id=\"chatField\" placeholder=\"Type a messageâ€¦\" autoComplete=\"off\" />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n"],"sourceRoot":""}